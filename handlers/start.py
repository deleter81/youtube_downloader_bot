import re
import os
from aiogram import types, Router, F, Bot
from aiogram.types import FSInputFile
from aiogram.filters import Command
from handlers.download import download_video
from utils.check_subscription import (
    check_subscriptions,
    get_subscription_message,
    get_check_subscription_button,
    escape_markdown
)

router = Router()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube
YOUTUBE_REGEX = re.compile(r'(https?://)?(www\.)?(youtube\.com|youtu\.?be)/.+')


@router.message(Command("start"))
async def start_command(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    is_subscribed = await check_subscriptions(user_id, bot)

    if not is_subscribed:
        text = get_subscription_message()
        await message.answer(
            text,
            parse_mode="MarkdownV2",
            disable_web_page_preview=True,
            reply_markup=get_check_subscription_button()
        )
        return

    await message.answer(escape_markdown("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."))


@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    is_subscribed = await check_subscriptions(user_id, bot)

    if is_subscribed:
        await callback.message.edit_text(
            escape_markdown("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ.\n\n"
                            "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"),
            parse_mode="MarkdownV2"
        )
    else:
        text = get_subscription_message()
        await callback.message.edit_text(
            text,
            parse_mode="MarkdownV2",
            disable_web_page_preview=True,
            reply_markup=get_check_subscription_button()
        )


@router.message(F.text)
async def handle_message(message: types.Message, bot: Bot):
    url = message.text.strip()
    user_id = message.from_user.id

    is_subscribed = await check_subscriptions(user_id, bot)
    if not is_subscribed:
        text = get_subscription_message()
        await message.answer(
            text,
            parse_mode="MarkdownV2",
            disable_web_page_preview=True,
            reply_markup=get_check_subscription_button()
        )
        return

    if YOUTUBE_REGEX.match(url):
        await message.answer(escape_markdown(f"üîó –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}\n\n‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ..."))

        file_path = download_video(url)

        if file_path:
            try:
                file = FSInputFile(file_path)
                await message.answer("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
                await message.answer_video(file)
                os.remove(file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            except Exception as e:
                await message.answer(escape_markdown(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}"))
        else:
            await message.answer(escape_markdown("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."))
    else:
        await message.answer(escape_markdown("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube."))


def register_start_handler(dp):
    dp.include_router(router)